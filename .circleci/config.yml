# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1

commands:
  deploy:
    description: Deploy to an environment
    parameters:
      release_path:
        type: string
        default: /var/www/safeshare.site/release/$CIRCLE_BUILD_NUM/
      releases_to_delete:
        type: integer
        default: 5
    steps:
      - run: echo $SSH_USER @ $SSH_HOST
      - run:
          name: Create << parameters.release_path >> folder
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo mkdir << parameters.release_path >>; sudo chown $SSH_USER:$SSH_USER << parameters.release_path >>"
      - run:
          name: Rsync contents
          command: |
            rsync -az --delete --exclude='.git' --filter=":- .gitignore" . $SSH_USER@$SSH_HOST:<< parameters.release_path >>
      - run:
          name: Copy console binary
          command: |
            scp bin/console $SSH_USER@$SSH_HOST:<< parameters.release_path >>/bin/
      - run:
          name: Generate .env.local
          environment:
            - APP_DEBUG: false
          command: |
            echo "APP_DEBUG=$APP_DEBUG" > .env.local
            echo "APP_ENV=$APP_ENV" >> .env.local
            echo "APP_SECRET=$APP_SECRET" >> .env.local
            echo "DATABASE_URL=$DATABASE_URL" >> .env.local
      - run:
          name: Copy .env.local
          command: |
            scp ./.env.local $SSH_USER@$SSH_HOST:<< parameters.release_path >>
      - run:
          name: Create var folder
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo mkdir << parameters.release_path >>/var"
      - run:
          name: Chown to safeshare, Chmod to 765 (except the keys)
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo chown safeshare:safeshare -R << parameters.release_path >>; sudo chmod 765 -R << parameters.release_path >>"
      - run:
          name: Warm cache
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo -u safeshare << parameters.release_path >>/bin/console cache:warmup --env $APP_ENV"
      - run:
          name: Enable new release
          command: |
            ssh $SSH_USER@$SSH_HOST "cd << parameters.release_path >>/../; sudo rm -f current; sudo ln -s $CIRCLE_BUILD_NUM current"
      - run:
          name: Delete old releases
          command: |
            ssh $SSH_USER@$SSH_HOST "cd << parameters.release_path >>/../; ls -tp | grep -E '[0-9]+' | tail -n +<< parameters.releases_to_delete >> | xargs -I {} sudo rm -r -- {}"
      - run:
          name: Run DB mirations
          command: |
            ssh $SSH_USER@$SSH_HOST "cd << parameters.release_path >>; sudo -u safeshare bin/console doctrine:migrations:migrate --no-interaction --env=$APP_ENV"
      - run:
          name: Restart FPM
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo service php7.4-fpm restart"

jobs:
  test:
    docker:
      - image: circleci/node
    steps:
      - run: echo "These are not the tests you are looking for"

  build-and-deploy-job:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run: npm run build
      - deploy:
          release_path: /var/www/safeshare.site/release/$CIRCLE_BUILD_NUM/

workflows:
  version: 2
  build-and-deploy:
    when:
      equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - build-and-deploy-job